{"version":3,"sources":["pages/Login/index.tsx","components/Header/index.tsx","components/Footer/index.tsx","layout/Home/index.tsx","route/route.tsx","pages/Register/index.tsx","pages/Index/index.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["Form","create","name","props","getFieldDecorator","form","offset","span","onSubmit","e","preventDefault","validateFields","err","values","console","log","className","Item","rules","required","message","prefix","type","style","color","placeholder","htmlType","href","RouteWithSubRoutes","route","path","render","component","routes","Login","Header","map","i","key","Footer","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTA2DeA,G,OAAAA,IAAKC,OAAO,CAAEC,KAAM,SAApBF,EAvDI,SAACG,GAClB,IAQQC,EAAsBD,EAAME,KAA5BD,kBACR,OACE,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAME,OAAQ,EAAGC,KAAM,GACzB,kBAAC,IAAD,CAAMC,SAba,SAACC,GACpBA,EAAEC,iBACFP,EAAME,KAAKM,gBAAe,SAACC,EAAUC,GAC9BD,GACHE,QAAQC,IAAI,4BAA6BF,OASfG,UAAU,cACxC,kBAAC,IAAKC,KAAN,KACGb,EAAkB,WAAY,CAC7Bc,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpChB,CAGC,kBAAC,IAAD,CACEiB,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAC1CC,YAAY,eAIlB,kBAAC,IAAKR,KAAN,KACGb,EAAkB,WAAY,CAC7Bc,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpChB,CAGC,kBAAC,IAAD,CACEiB,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAC1CF,KAAK,WACLG,YAAY,eAIlB,kBAAC,IAAKR,KAAN,KACE,kBAAC,IAAD,CAAQK,KAAK,UAAUI,SAAS,SAASV,UAAU,qBAAnD,gBAGA,kBAAC,IAAD,CAAQM,KAAK,UAAWN,UAAU,qBAAlC,gBAIA,uBAAGA,UAAU,oBAAoBW,KAAK,IAAtC,4B,iBC9CS,aACb,OACE,wCCFW,aACb,OACE,wCCCJ,SAASC,EAAmBC,GAC1B,OACE,kBAAC,IAAD,CACEC,KAAMD,EAAMC,KACZC,OAAQ,SAAC5B,GAAD,OACN,kBAAC0B,EAAMG,UAAP,iBAAqB7B,EAArB,CAA4B8B,OAAQJ,EAAMI,aAMnC,ICLTA,EAAS,CACb,CACEH,KAAM,SACNE,UAAWE,GAEb,CACEJ,KAAM,YACNE,UChBW,WACb,OACE,2CDgBF,CACEF,KAAM,cACNE,UDNW,YAAoB,IAAlBC,EAAiB,EAAjBA,OACf,OACE,6BACA,kBAACE,EAAD,MACA,kBAAC,IAAD,KACKF,EAAOG,KAAI,SAACP,EAAYQ,GAAb,OACV,kBAACT,EAAD,eAAoBU,IAAKD,GAAOR,QAGpC,kBAACU,EAAD,QCFFN,OAAQ,CACN,CACEH,KAAM,cACNE,UExBO,WACb,OACE,2CFwDJ,SAASJ,EAAmBC,GAC1B,OACE,kBAAC,IAAD,CACEC,KAAMD,EAAMC,KACZC,OAAQ,SAAC5B,GAAD,OACN,kBAAC0B,EAAMG,UAAP,iBAAqB7B,EAArB,CAA4B8B,OAAQJ,EAAMI,a,cGrD9BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASd,OAAO,mBCFD,WACb,OL2CE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACGE,EAAOG,KAAI,SAACP,EAAOQ,GAAR,OACV,kBAAC,EAAD,eAAoBC,IAAKD,GAAOR,YI9C5B,MAASiB,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.f3d66187.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Icon, Input, Button, Checkbox, Row, Col } from 'antd';\nimport './index.scss';\n\nconst  LoginForm = (props: any) => {\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    props.form.validateFields((err: any, values: any) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n  const { getFieldDecorator } = props.form;\n  return(\n    <div>\n    <Row>\n      <Col  offset={8} span={8}>\n    <Form onSubmit={handleSubmit} className=\"login-form\">\n    <Form.Item>\n      {getFieldDecorator('username', {\n        rules: [{ required: true, message: 'Please input your username!' }],\n      })(\n        <Input\n          prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n          placeholder=\"Username\"\n        />,\n      )}\n    </Form.Item>\n    <Form.Item>\n      {getFieldDecorator('password', {\n        rules: [{ required: true, message: 'Please input your Password!' }],\n      })(\n        <Input\n          prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n          type=\"password\"\n          placeholder=\"Password\"\n        />,\n      )}\n    </Form.Item>\n    <Form.Item>\n      <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n        登陆\n      </Button>\n      <Button type=\"default\"  className=\"login-form-button\">\n        注册\n      </Button>\n\n      <a className=\"login-form-forgot\" href=\"\">\n        Forgot password\n      </a>\n    </Form.Item>\n  </Form>\n  </Col>\n    </Row>\n    </div>\n  );\n};\n\nexport default Form.create({ name: 'login' })(LoginForm);\n","import React from \"react\";\n\nexport default () => {\n  return(\n    <div>\n      header\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return(\n    <div>\n      footer\n    </div>\n  );\n};\n","import React, { Children } from \"react\";\nimport Header from \"../../components/Header\";\nimport Footer from \"../../components/Footer\";\nimport { Switch, Route } from \"react-router\";\n\nfunction RouteWithSubRoutes(route: any) {\n  return (\n    <Route\n      path={route.path}\n      render={(props) => (\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\n\nexport default ({routes}: any) => {\n  return(\n    <div>\n    <Header></Header>\n    <Switch>\n        {routes.map((route: any, i: number) => (\n          <RouteWithSubRoutes key={i} {...route} />\n        ))}\n      </Switch>\n      <Footer></Footer>\n    </div>\n  );\n};\n","import Login from \"../pages/Login\";\nimport React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from \"../layout/Home\";\nimport Index from \"../pages/Index\";\nimport Register from \"../pages/Register\";\n\nconst routes = [\n  {\n    path: \"/login\",\n    component: Login,\n  },\n  {\n    path: \"/register\",\n    component: Register,\n  },\n  {\n    path: \"/home/index\",\n    component: Home,\n    routes: [\n      {\n        path: \"/home/index\",\n        component: Index,\n      },\n    ],\n  },\n  // {\n  //   path: \"/tacos\",\n  //   component: Tacos,\n  //   routes: [\n  //     {\n  //       path: \"/tacos/bus\",\n  //       component: Bus\n  //     },\n  //     {\n  //       path: \"/tacos/cart\",\n  //       component: Cart\n  //     }\n  //   ]\n  // }\n];\n\nexport default function RouteConfig() {\n  return (\n    <Router >\n      <div>\n        <Switch>\n          {routes.map((route, i) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction RouteWithSubRoutes(route: any) {\n  return (\n    <Route\n      path={route.path}\n      render={(props) => (\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\n","import React from \"react\";\n\nexport default () => {\n  return(\n    <div>\n      Register\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return(\n    <div>\n      index\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\n// tslint:disable-next-line:interface-name\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nimport RouteConfig from \"./route/route\";\nimport './App.css';\n\nexport default function App() {\n  return RouteConfig();\n}\n"],"sourceRoot":""}